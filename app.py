from auth import startup
from flask import Flask, redirect, request, jsonify
import json
import random
import requests

app = Flask(__name__)

MRT_MAP = dict()

def read_mrt_st() -> dict[str, str]:
    with open('data/mrt.json') as json_file:
        data = json.load(json_file)
        return data
        
@app.route('/')
def index():
    return "<h1> /authenticate /get_duration /generate </h1>"

@app.route('/authenticate')
def auth():
    response = startup.getUser(app.config['CLIENT_ID'], app.config['CLIENT_SECRET'])
    return redirect(response)

@app.route('/callback/')
def callback():
    startup.getUserToken(request.args['code'])
    # [ACCESS_TOKEN, AUTHENTICATION_HEADER, AUTHORIZED_SCOPES, EXPIRATION]
    acc_token = dict({"token": startup.getAccessToken()[0]}) 
    return jsonify(acc_token)

@app.route('/get_duration', methods=['POST'])
def retrieve_duration():
# def retrieve_duration(src, dst):
    global MRT_MAP
    if not MRT_MAP:
        MRT_MAP = read_mrt_st()
    src = request.form['src']
    dst = request.form['dst']
    url = f"https://maps.googleapis.com/maps/api/distancematrix/json?destinations={MRT_MAP[dst]}%20SINGAPORE&origins={MRT_MAP[src]}%20SINGAPORE&mode=transit&key={app.config['GMAP_KEY']}"
    data = requests.get(url)
    data_json = data.json()
    # print(data_json)
    duration = {"duration": data_json["rows"][0]["elements"][0]["duration"]["value"]}
    # print(duration)
    return jsonify(duration)

def get_user_id(token) -> str:
    url = f"https://api.spotify.com/v1/me/"
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": None,
    }
    headers["Authorization"] = f"Bearer {token}"
    data = requests.get(url, headers=headers)
    data_json = data.json()
    user_id = data_json["id"]
    # print(user_id)
    return user_id
    
def get_user_saved_show(token):
    url = f"https://api.spotify.com/v1/me/shows"
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": None,
    }
    headers["Authorization"] = f"Bearer {token}"
    data = requests.get(url, headers=headers)
    data_json = data.json()
    user_shows = data_json["items"]
    show_ids = [show["show"]["id"] for show in user_shows]
    return show_ids

def get_user_saved_episodes(token, show_id):
    url = f"https://api.spotify.com/v1/shows/{show_id}/episodes"
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": None,
    }
    headers["Authorization"] = f"Bearer {token}"
    data = requests.get(url, headers=headers)
    data_json = data.json()
    user_episodes = data_json["items"]
    user_episodes_essential_data = [
        {
            key: episode[key]
            for key in episode.keys() & {"duration_ms", "resume_point", "id", "name"}
        }
        for episode in user_episodes
    ]
    not_finished_episodes = [
        episode
        for episode in user_episodes_essential_data
        if episode["resume_point"]["fully_played"] == False
    ]
    return not_finished_episodes

@app.route('/generate', methods=['POST'])
def generate_playlist():
# def generate_playlist(token, user_id, duration):
    token = request.form['token']
    user_id = get_user_id(token)
    duration = request.form['duration']

    duration = int(duration) * 1000
    # create playlist based on user_id
    playlist = []
    create_playlist_url = f"https://api.spotify.com/v1/users/{user_id}/playlists"
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": None,
    }
    headers["Authorization"] = f"Bearer {token}"
    data = {
        "name": f"Awesome dotCast #{random.randint(0,999999)}",
        "description": "Awesome Podcast Playlist Generated by dotCast",
        "public": True,
    }
    res = requests.post(create_playlist_url, json=data, headers=headers).json()
    playlist_id = res["id"]
    add_item_url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"

    # add episodes to playlist
    episode_ids = []

    # user pref
    saved_shows = get_user_saved_show(token)
    for show_id in saved_shows:
        saved_eps = get_user_saved_episodes(token, show_id)
        for ep in saved_eps:
            if ep["duration_ms"] < duration:
                episode_ids.append(ep["id"])
                duration -= ep["duration_ms"]

    # feeling lucky
    feel_lucky_url = "https://api.spotify.com/v1/search?q=top%20podcasts&type=episode"
    feel_lucky_res = requests.get(feel_lucky_url, headers=headers).json()
    lucky_episodes_data = feel_lucky_res["episodes"]["items"]

    lucky_episodes_essential_data = [
        {
            key: episode[key]
            for key in episode.keys() & {"duration_ms", "resume_point", "id", "name"}
        }
        for episode in lucky_episodes_data
    ]
    lucky_not_finished_episodes = [
        episode
        for episode in lucky_episodes_essential_data
        if episode["resume_point"]["fully_played"] == False
    ]
    # print(lucky_not_finished_episodes)
    for ep in lucky_not_finished_episodes:
        if ep["duration_ms"] < duration:
            episode_ids.append(ep["id"])
            duration -= ep["duration_ms"]

    uris = [f"spotify:episode:{ep_id}" for ep_id in episode_ids]
    items = {"uris": uris}
    res = requests.post(add_item_url, json=items, headers=headers)
    return jsonify({"OK": 200})

if __name__ == '__main__':
    app.config.from_file("auth/config.json", load=json.load)
    app.run(port=8081, debug=True)
